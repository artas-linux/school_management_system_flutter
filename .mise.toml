[tools]
flutter = "latest"
dart = "latest"
bun = "latest"
node = "latest"
pnpm = "latest"
uv = "latest"
cargo-binstall = "latest"
deno = "latest"
go = "latest"
watchexec = "latest"
"npm:five-server" = "latest"

# ===== Daily Development =====

[tasks.setup]
description = "🧰 Initialize project environment and dependencies"
run = [
    "echo '🧰 Setting up Flutter project environment...'",
    "flutter doctor -v",
    "flutter pub get",
    "dart pub run build_runner build --delete-conflicting-outputs",
    "bun install -g firebase-tools",
    "echo '✅ Setup complete!'",
    "echo ''",
    "echo '📌 Next steps:'",
    "echo '  mise run dev     # Start development server'",
    "echo '  mise run gen     # Generate code'",
    "echo '  mise run test    # Run tests'",
]

# ===== Zen Tools Integration =====

[tasks.zen-thinkdeep]
description = "🧠 Perform comprehensive deep analysis using AI-powered thinkdeep tool"
run = [
    "echo '🧠 Running comprehensive deep analysis...'",
    "bash scripts/zen-tools/cli_interface.sh thinkdeep ${args}",
    "echo '✅ Deep analysis complete'",
]

[tasks.zen-debug]
description = "🔍 Execute intelligent debugging session with AI-powered debug tool"
run = [
    "echo '🔍 Running enhanced debugging session...'",
    "bash scripts/zen-tools/cli_interface.sh debug ${args}",
    "echo '✅ Enhanced debugging complete'",
]

[tasks.zen-help]
description = "ℹ️  Display comprehensive usage information for zen tools"
run = [
    "bash scripts/zen-tools/cli_interface.sh help",
]

[tasks.dev]
description = "📱 Launch mobile development server with hot reload"
run = [
    "echo '📱 Starting mobile development server with hot reload...'",
    "flutter run",
]

[tasks.dev-web]
description = "🌐 Launch web development server with hot reload"
run = [
    "echo '🌐 Starting web development server with hot reload...'",
    "flutter run -d chrome",
]

[tasks.dev-web-five]
description = "🌐 Launch web development server with five-server and google-chrome-stable"
run = [
    "echo '🌐 Starting web development server with five-server and google-chrome-stable...'",
    "command -v google-chrome-stable > /dev/null 2>&1 || { echo '⚠️ google-chrome-stable not found. Install with: sudo apt install google-chrome-stable'; exit 1; }",
    "flutter run -d web-server --web-port=8080 --web-hostname=127.0.0.1 --dart-define=FLUTTER_WEB_RENDERER=canvaskit &",
    "sleep 3",  # Wait a bit for the server to start
    "google-chrome-stable --new-window --app=http://127.0.0.1:8080",
]

[tasks.serve-web]
description = "🌐 Serve built web application locally"
run = [
    "echo '🌐 Serving web application at http://localhost:8080...'",
    "if [ ! -d 'build/web' ]; then echo '⚠️  Web build not found. Run mise run build-web first'; exit 1; fi",
    "cd build/web && python -m http.server 8080",
]

[tasks.gen]
description = "⚙️  Execute build runner code generation"
run = [
    "echo '⚙️  Generating code with build runner...'",
    "dart pub run build_runner build --delete-conflicting-outputs",
    "echo '✅ Code generation complete'",
]

[tasks.fix]
description = "✨ Format, analyze and fix code quality issues"
run = [
    "echo '✨ Performing code quality checks and formatting...'",
    "dart format lib/ test/",
    "flutter analyze",
    "echo '✅ Code quality check complete'",
]

[tasks.test]
description = "🧪 Run all tests with coverage report generation"
run = [
    "echo '🧪 Executing test suite with coverage...'",
    "flutter test --coverage",
    "echo '📊 Coverage report: coverage/lcov.info'",
    "echo '💡 Tip: Run mise run coverage to generate HTML report'",
]

[tasks.test-web]
description = "🌐 Run tests specifically for web platform"
run = [
    "echo '🌐 Running tests for web platform...'",
    "flutter test --platform=chrome",
    "echo '✅ Web tests completed'",
]

# ===== Development Support =====

[tasks.watch]
description = "🔄 Watch files continuously and auto-generate code on changes"
run = [
    "echo '🔄 Starting continuous file watch mode...'",
    "echo '💡 Code will be automatically generated when files are changed'",
    "dart pub run build_runner watch",
]

[tasks.coverage]
description = "📈 Generate interactive HTML coverage report from test results"
run = [
    "echo '📈 Generating comprehensive HTML coverage report...'",
    "if [ ! -f coverage/lcov.info ]; then echo '⚠️  Coverage file not found. Please run mise run test first'; exit 1; fi",
    "genhtml coverage/lcov.info -o coverage/html --ignore-errors source",
    "echo '✅ HTML coverage report: coverage/html/index.html'",
    "echo '💡 Open coverage/html/index.html in your browser to view'",
]

# ===== Building =====

[tasks.build-android]
description = "📱 Build optimized Android APK/AAB for production"
run = [
    "echo '📱 Building optimized Android application...'",
    "flutter pub get",
    "dart pub run build_runner build --delete-conflicting-outputs",
    "flutter build appbundle --release",
    "echo '✅ Android App Bundle: build/app/outputs/bundle/release/app-release.aab'",
]

[tasks.build-ios]
description = "🍎 Build optimized iOS IPA for App Store distribution"
run = [
    "echo '🍎 Building optimized iOS application...'",
    "flutter pub get",
    "dart pub run build_runner build --delete-conflicting-outputs",
    "flutter build ipa --release",
    "echo '✅ iOS IPA: build/ios/ipa/*.ipa'",
]

[tasks.build-web]
description = "🌐 Build optimized web application for deployment"
run = [
    "echo '🌐 Building optimized web application...'",
    "flutter pub get", 
    "dart pub run build_runner build --delete-conflicting-outputs",
    "flutter build web --release --dart-define=FLUTTER_WEB_RENDERER=canvaskit --base-href=\"/school_management_system_flutter/\"",
    "echo '✅ Web version: build/web/'",
]

[tasks.build-and-serve-web]
description = "🌐 Build and serve web application in one command"
run = [
    "echo '🌐 Building and serving web application...'",
    "flutter build web --release",
    "echo '✅ Web application built. Serving at http://localhost:8080...'",
    "cd build/web && python -m http.server 8080",
]

[tasks.chrome-mcp]
description = "🔍 Start Chrome DevTools MCP server for browser automation"
run = [
    "echo '🔍 Starting Chrome DevTools MCP server...'",
    "bash scripts/start-chrome-mcp.sh",
]

# ===== Maintenance =====

[tasks.clean]
description = "🧹 Clean project artifacts and refresh dependencies"
run = [
    "echo '🧹 Cleaning project artifacts and refreshing dependencies...'",
    "flutter clean",
    "flutter pub get",
    "dart pub run build_runner clean",
    "dart pub run build_runner build --delete-conflicting-outputs",
    "echo '✅ Cleanup complete'",
]

[tasks.kill-ports]
description = "🛑 Kill processes running on common Flutter ports (8080, 9100, 42613, etc.)"
run = [
    "echo '🛑 Killing processes on common Flutter ports...'",
    "kill -9 $(lsof -t -i:8080) 2>/dev/null || echo '❌ No process found on port 8080 or lsof not available'",
    "kill -9 $(lsof -t -i:9100) 2>/dev/null || echo '❌ No process found on port 9100 or lsof not available'",
    "kill -9 $(lsof -t -i:3000) 2>/dev/null || echo '❌ No process found on port 3000 or lsof not available'",
    "kill -9 $(lsof -t -i:3001) 2>/dev/null || echo '❌ No process found on port 3001 or lsof not available'",
    "kill -9 $(lsof -t -i:5000) 2>/dev/null || echo '❌ No process found on port 5000 or lsof not available'",
    "kill -9 $(lsof -t -i:5555) 2>/dev/null || echo '❌ No process found on port 5555 or lsof not available'",
    "kill -9 $(lsof -t -i:8000) 2>/dev/null || echo '❌ No process found on port 8000 or lsof not available'",
    "kill -9 $(lsof -t -i:9000) 2>/dev/null || echo '❌ No process found on port 9000 or lsof not available'",
    "kill -9 $(lsof -t -i:42613) 2>/dev/null || echo '❌ No process found on port 42613 or lsof not available'",
    "echo '✅ Port cleanup complete'",
]

[tasks.clean-all]
description = "🔥 Complete clean: Clean project and kill running processes"
run = [
    "echo '🔥 Performing complete cleanup...'",
    "mise run clean",
    "mise run kill-ports",
    "echo '✅ Complete cleanup finished'",
]

[tasks.upgrade]
description = "⬆️  Upgrade all dependencies to latest compatible versions"
run = [
    "echo '⬆️  Upgrading project dependencies...'",
    "flutter pub upgrade",
    "dart pub run build_runner clean",
    "dart pub run build_runner build --delete-conflicting-outputs",
    "echo '✅ Dependencies updated'",
    "echo '💡 Please check changes in pubspec.yaml'",
]

# ===== External Service Integration =====

[tasks.firebase]
description = "🔥 Initialize and configure Firebase project backend services"
run = [
    "echo '🔥 Setting up Firebase backend services...'",
    "firebase login",
    "firebase init",
    "echo '✅ Firebase setup complete'",
    "echo ''",
    "echo '📌 Next steps:'",
    "echo '  1. Place ios/Runner/GoogleService-Info.plist'",
    "echo '  2. Place android/app/google-services.json'",
    "echo '  3. Enable Authentication/Firestore in Firebase Console'",
]

# ===== Help =====

[settings]
experimental = true # enable experimental features
verbose = false     # set to true to see full installation output

[tasks.help]
description = "📋 Display comprehensive list of all available commands"
run = [
    "echo '📋 Flutter App Template - Available Commands'",
    "echo ''",
    "echo '📱 Daily development:'",
    "echo '  setup         Initialize project environment and dependencies'", 
    "echo '  dev           Launch mobile development server with hot reload'",
    "echo '  dev-web       Launch web development server with hot reload'",
    "echo '  gen           Execute build runner code generation'",
    "echo '  fix           Format, analyze and fix code quality issues'",
    "echo '  test          Run all tests with coverage report generation'",
    "echo '  test-web      Run tests specifically for web platform'",
    "echo ''",
    "echo '🌐 Web-specific:'",
    "echo '  build-web          Build optimized web application for deployment'",
    "echo '  serve-web          Serve built web application locally'",
    "echo '  build-and-serve-web  Build and serve web application in one command'",
    "echo ''",
    "echo '🔍 Browser Automation:'",
    "echo '  chrome-mcp      Start Chrome DevTools MCP server for browser automation'",
    "echo ''",
    "echo '🧠 Zen Tools integration:'",
    "echo '  zen-thinkdeep   Perform deep analysis with thinkdeep AI tool'",
    "echo '  zen-debug       Execute intelligent debugging with zen AI tool'",
    "echo '  zen-help        Display zen tools usage information'",
    "echo ''",
    "echo '🔄 Development support:'",
    "echo '  watch     Watch files continuously and auto-generate code on changes'",
    "echo '  coverage  Generate interactive HTML coverage report from test results'",
    "echo ''",
    "echo '⚙️  Building:'",
    "echo '  build-android  Build optimized Android APK/AAB for production'",
    "echo '  build-ios      Build optimized iOS IPA for App Store distribution'", 
    "echo '  build-web      Build optimized web application for deployment'",
    "echo ''",
    "echo '🧹 Maintenance:'",
    "echo '  clean         Clean project artifacts and refresh dependencies'",
    "echo '  kill-ports    Kill processes running on common Flutter ports'",
    "echo '  clean-all     Complete clean: Clean project and kill running processes'",
    "echo '  upgrade       Upgrade all dependencies to latest compatible versions'",
    "echo ''",
    "echo '☁️  External integration:'",
    "echo '  firebase  Initialize and configure Firebase project backend services'",
    "echo ''",
    "echo '📋 Help:'",
    "echo '  help      Display comprehensive list of all available commands'",
]
