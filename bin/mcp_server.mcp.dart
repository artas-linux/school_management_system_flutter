// GENERATED CODE - DO NOT MODIFY BY HAND
// dart format width=80

// **************************************************************************
// MCPGenerator
// **************************************************************************

// ignore_for_file: type=lint
part of 'mcp_server.dart';

/// Generated extension for [SchoolManagementMCPServer] that provides automatic registration
/// of all annotated MCP tools, resources, and prompts.
///
/// This code is automatically generated by the MCP Dart framework.
/// Do not modify this file directly - instead, modify the source
/// class and run `dart run build_runner build` to regenerate.
extension SchoolManagementMCPServerRegistration on SchoolManagementMCPServer {
  /// Registers all generated handlers for annotated methods.
  /// Call this method in your constructor to automatically register
  /// all MCP tools, resources, and prompts.
  void registerGeneratedHandlers() {
    // Register handler for @MCPTool('getSchoolInfo')
    // Example tool that retrieves school data
    registerTool('getSchoolInfo', (context) async {
      return await getSchoolInfo();
    }, description: 'Retrieve information about the school');

    // Register handler for @MCPTool('getStudents')
    // Example tool that gets a list of students
    registerTool(
      'getStudents',
      (context) async {
        return await getStudents();
      },
      description: 'Get a list of students from the school management system',
    );

    // Register handler for @MCPTool('getTeachers')
    // Example tool that gets a list of teachers
    registerTool(
      'getTeachers',
      (context) async {
        return await getTeachers();
      },
      description: 'Get a list of teachers from the school management system',
    );

    // Register handler for @MCPResource('status')
    // Example resource that provides server status
    registerResource('status', (uri) async {
      return await getStatus(uri);
    });

    // Register handler for @MCPPrompt('generateReport')
    // Example prompt template for generating reports
    registerPrompt('generateReport', (args) {
      return generateReportPrompt(args);
    });
  }

  /// Generates standardized usage documentation for MCP servers.
  ///
  /// This helper method provides consistent help text formatting
  /// for this specific MCP server with its available capabilities.
  void showUsage({String? serverName}) {
    print('Usage: dart ${serverName ?? "server"}.dart [options]');
    print('');
    print('Options:');
    print('  --stdio        Start server in stdio mode (default)');
    print('  --http         Start HTTP server on port 8080');
    print('  --port <port>  Specify HTTP port (default: 8080)');
    print('  --help, -h     Show this help message');
    print('');
    print('Available tools: getSchoolInfo, getStudents, getTeachers');
    print('Available resources: status');
    print('Available prompts: generateReport');
    print('');

    print('Examples:');
    print('  dart ${serverName ?? "server"}.dart');
    print('  dart ${serverName ?? "server"}.dart --http');
    print('  dart ${serverName ?? "server"}.dart --http --port 3000');
  }
}
