// GENERATED CODE - DO NOT MODIFY BY HAND
// dart format width=80

// **************************************************************************
// MCPGenerator
// **************************************************************************

// ignore_for_file: type=lint
part of 'generate_report.dart';

/// Generated extension for [ReportGeneratorMCPServer] that provides automatic registration
/// of all annotated MCP tools, resources, and prompts.
///
/// This code is automatically generated by the MCP Dart framework.
/// Do not modify this file directly - instead, modify the source
/// class and run `dart run build_runner build` to regenerate.
extension ReportGeneratorMCPServerRegistration on ReportGeneratorMCPServer {
  /// Registers all generated handlers for annotated methods.
  /// Call this method in your constructor to automatically register
  /// all MCP tools, resources, and prompts.
  void registerGeneratedHandlers() {
    // Register handler for @MCPPrompt('generateStudentPerformanceReportPrompt')
    // Generate a prompt for creating a student performance report
    registerPrompt('generateStudentPerformanceReportPrompt', (args) {
      return generateStudentPerformanceReportPrompt(args);
    });

    // Register handler for @MCPPrompt('generateTeacherReportPrompt')
    // Generate a prompt for creating a teacher performance report
    registerPrompt('generateTeacherReportPrompt', (args) {
      return generateTeacherReportPrompt(args);
    });

    // Register handler for @MCPPrompt('generateCourseAttendanceReportPrompt')
    // Generate a prompt for creating a course/attendance report
    registerPrompt('generateCourseAttendanceReportPrompt', (args) {
      return generateCourseAttendanceReportPrompt(args);
    });

    // Register handler for @MCPPrompt('createCustomReportPrompt')
    // Generate a customizable report prompt
    registerPrompt('createCustomReportPrompt', (args) {
      return createCustomReportPrompt(args);
    });
  }

  /// Generates standardized usage documentation for MCP servers.
  ///
  /// This helper method provides consistent help text formatting
  /// for this specific MCP server with its available capabilities.
  void showUsage({String? serverName}) {
    print('Usage: dart ${serverName ?? "server"}.dart [options]');
    print('');
    print('Options:');
    print('  --stdio        Start server in stdio mode (default)');
    print('  --http         Start HTTP server on port 8080');
    print('  --port <port>  Specify HTTP port (default: 8080)');
    print('  --help, -h     Show this help message');
    print('');
    print(
      'Available prompts: generateStudentPerformanceReportPrompt, generateTeacherReportPrompt, generateCourseAttendanceReportPrompt, createCustomReportPrompt',
    );
    print('');

    print('Examples:');
    print('  dart ${serverName ?? "server"}.dart');
    print('  dart ${serverName ?? "server"}.dart --http');
    print('  dart ${serverName ?? "server"}.dart --http --port 3000');
  }
}
